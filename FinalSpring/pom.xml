<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>FinalSpring</groupId>
	<artifactId>FinalSpring</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<build>
	
		<!-- 
			Resources는 Maven으로 빌드할 때
			포함되어야 할 것들을 정의한다.
			
			현재 프로젝트에서는 MyBAtis 관련 Mapper XML 파일들이
			src/main/java ~~~ dao/sql 안에 포함되기 때문에
			Maven 빌드 시 이 파일들을 같이 빌드할 수 있도록
			설정해준다.
		
		 -->
		 
		 <resources>
		 	<resource>
		 		<directory>src/main/java</directory>
		 		<includes>
		 			<include>**/*.xml</include>
		 		</includes>
		 	</resource>
		 	<resource>
		 		<directory>src/main/resources</directory>
		 	</resource>
		 </resources>
		 
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<repositories>
	
	<!-- 
		 Orace Java DataBase Connector(OJDBC)
	
		 Oracle JDBC는 Maven Global Repository에 등록되 있지 않음
		 OJDBC를 사용하기 위해서는 Maven Repository를 따로 등록해주어야 한다.
		 Oracle의 경우 http://maven.jahia.org/maven2를 Repository로 가진다.
		 Maven Repository를 등록해주면 ojbc 라이브러리를 import할 수 있다.
		 
	 -->
		<repository>
			<id>Oracle</id>
			<name>Oracle JDBC Repository</name>
			<url>http://maven.jahia.org/maven2</url>
		</repository>

	</repositories>
	<!--	Project에 필요한 Library들의 Maven Id를 적는다. 
			여기에 등록된 Dependency 들은 자동으로 의존 라이브러리까지
			모두 import해준다.
	-->
	<dependencies>
		<!--  
			Spring Web MVC를 사용하기 위한 라이브러리를 추가한다.
			Web MVC는 Controller, Model, View로 이루어져 있는 것.
			View Resolver, DispatcherServlet, EncodingFilter
			등등이 포함되어 있다.
		-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>4.1.6.RELEASE</version>
			<!-- Spring은 Commons-logging을 이용해서 로그를 남긴다.
			프로젝트에서는 Commons-logging을 사용하지 않고 logback을 사용하기
			때문에 충돌 제거를 위해 commons-logging은 제외하고 import한다. 
			-->
			<exclusions>
				<exclusion>
					<artifactId>commons-logging</artifactId>
					<groupId>commons-logging</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<!--  
			원래 Hibernate는 ORM 프레임 워크인데,
			동일 개발사에서 Web Parameter를 검증할 수 있는
			Validator를 개발함. -> hibernate-validator
			hibernate-validator는 Command객체로 파라미터를 받을 때
			@Valid Annotation을 이용해서 파라미터 검증을 한다.
			이 라이브러리에는 @NotEmpty, @NotBlank, @Length, @Email
			@Range @URL Annotation이 포함되어 있다.
		-->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>5.1.3.Final</version>
		</dependency>
		<!-- 
			 Oracle JDBC http://maven.jahia.org/maven2 Reporitory가
			 등록 되 있어야만 한다.
		 	 
		 	 Oracle Java가 연동될 수 있는 API를 제공한다.
		 	 Connection, PreparedStatement, ResultSet 등이 
		 	 포함되어 있다.
		 	 
		 	 프로젝트에서는 직접적인 사용은 하지 않지만,
		 	 MyBatis가 필요로 하기 때문에 import 해준다.
		-->
		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc6</artifactId>
			<version>11.1.0.7.0</version>
		</dependency>
		<!-- 
		
			 JSTL: Java Standard Tab Libraries
		
			 JSTL와 Standard는 서로 의존적인 라이브러리들이다.
			 JSP에서 JSTL Taglib를 사용하기 위함이며
			 가장 빈번하게 사용되는 JSTL Taglib는 core이다.
			 core library는
			 c:if, c:choose, c:when, c:out, c:url, c:set 등등이
			 등록되어 있다. 
		 -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>1.1.2</version>
		</dependency>
		<!-- 
			단위 테스트 툴인 JUnit을 Spring에서 사용하기 편하게
			추상화 시켜놓은 라이브러리이다.
			
			JUnit이 Spring Context XML File을 Load 해
			사용할 수 있도록 지원해 준다.
			
			@RunWith, @ContextConfigure Annotation을 포함하고 있다.
			
			(Spring 교재안 84Page 교재안 참고)
			
			@RunWith(SpringJUnit4ClassRunner.class)
			@ContextConfiguration(locations={"xml파일의 이름을 포함한 경로"})
			위 처럼 설정하면 Context XML 파일을 Load해 온다.
			
		 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>4.1.6.RELEASE</version>
		</dependency>
		
		<!--
			Logback 의존 라이브러리 추가
			
			slf4j-api, jcl-over-slf4j, 
			logback-classic, logback-extends-spring
			
			위 4개 라이브러리가 필요하다.
			
			Logback은 SLF4j 인터페이스를 구현한 로깅 솔루션으로
			slf4j를 이용해서 사용해야 한다.
			그러므로, slf4j-api를 임포트 한다.
		
		  -->
		<!--
		
			Java Commons Logging Over SLF4J의 약자로
			Spring이나 기타 라이브러리들이
			Commons-Logging 으로 로그를 남길 때
			SLF4J를 사용할수 있도록 변경해주는 라이브러리이다.
			별다른 설정은 필요없다.
			
		  -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>1.7.12</version>
		</dependency>
		<!-- 
			SLF4J 인터페이스를 사용할 Logback 라이브러리			
			src/main/resources 아래의 logback.xml파일을
			만들어 주어야 한다.
			
			logback.xml파일을 만들지 않을 경우
			라이브러리가 포함하고 있는 기본 logback.xml 파일을 사용한다.
		 -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.1.3</version>
		</dependency>
		<!--  -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.12</version>
		</dependency>
		<!-- 
			프로젝트를 진행하다보면 logback.xml 파일의 이름을 
			따로 변경하고 싶을 때가 종종 발생된다.
			
			Windows용 / Linux용으로 구분하거나
			개발서버, 검증서버, 운영서버 용으로 따로 구분하거나 할 때
			파일의 이름을 변경할 수 있는 라이브러리이다.
			
			LogbackConfigListener를 Web.xml에 등록해서 사용한다.
		
		 -->
		<dependency>
			<groupId>org.logback-extensions</groupId>
			<artifactId>logback-ext-spring</artifactId>
			<version>0.1.2</version>
		</dependency>
		<!-- 
			Ajax 통신을 할 때 가장 많이 쓰이는 Return Type은
			JSON Type이다.
			
			기존의 방법대로라면 JSON Type를 일일이 String으로 작성해서
			리턴시켜야 하는데, 이 라이브러리는
			@ResponseBody 라는 Annotation을 이용해서
			VO(Value Object)를 리턴시키면
			자동으로 JSON Type으로 변경시켜 준다.
			
			@RequestMapping("/getJson")
			@ResponseBody
			public MemberInfoVO getJson() {
				
				MemberInfoVO memberInfo = new MemberInfoVO();
				
				memberInfo.setResult(true);
				
				memberInfo.setName("김태훈");
				memberInfo.setPhoneNumber("010-2227-XXXX");
				
				return memberInfo;
			}
		 -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.5.2</version>
		</dependency>
		<!-- 
		
			Apache 재단에서 개발한 파일 업로드 라이브러이다.
			MultipartViewResolver를 이용해 파일을 업로드 시킨다.
			MultipartViewResolver로 파일을 전송시키기 위해서는
			form element에 enctype="multipart/formdata"라는
			속성을 부여 해야만 하며,
			
			Controller에서는 MultipartHttpServletRequest를
			이용해서 파라미터를 받아온다.
			
			전달된 파일은 MultipartHttpServletRequest.getFile("fileElementName");
			을 통해서 가져온다.
			
			Command 객체에서는 그냥 MultipartFile이라고만 적어주면
			파일을 알아서 넣어준다.
			
			전달된 파일을 저장하기 위해서는 MultipartFile.transferTo(목적지);
			명령어를 사용한다.		
		
		 -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.1</version>
		</dependency>
		
		<!--
		
			SpringFramework 4.0부터 추가된 모듈
			현재까지는 SockJS만 지원한다.
			
			HTML5에서 WebSocket을 편리하게 사용할 수 있도록
			추상화 시켜놓은 모듈
			
			Servlet 3.0을 지원하는 WAS / Container(JSP Container, Servlet Container Jetty, Tomcat)
			만 사용할 수 있다.
		
		  -->
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-websocket</artifactId>
			<version>4.1.6.RELEASE</version>
		</dependency>
		
		<!-- 

			Connecton Pool를 쉽게 생성할 수 있도록 추상화 시킨 라이브러리
			com.mchange.v2.c3p0.ComboPooledDataSource
			클래스를 통해서 Connection Pool를 설정한다.
			(Spring 교안 192, 193 슬라이드 참고)

			빠른 처리/대응을 위해서 여러 개의 Connection을 미리 만들어 둔다.
			기본 설정으로는 최대 15의 Connection을 생성한다.
			
		 -->
		<dependency>
			<groupId>com.mchange</groupId>
			<artifactId>c3p0</artifactId>
			<version>0.9.5</version>
		</dependency>
		<!-- 
		
			Spring 프로젝트에서 가장 많이 쓰이는 ORM Framework
			쿼리의 구조적인 관리가 가능해지며
			쿼리의 실행 및 트랙잭션을 간편하게 해 준다.
			
			mybatis-spring, mybatis, spring-jdbc가 필요하다.
			
			mybatis-spring은 spring이 mybatis를 정식 지원하지 않기 때문에
			Mybatis 개발사에서 따로 만든 연동 모듈
			
			MyBatis를 사용하기 위해서는 꼭 필요하다.
			
			* Spring이 정식지원하는 ORM은 Spring-JPA가 유일하다.
		
		
		 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.2.2</version>
		</dependency>
		<!-- 
			Mybatis 라이브러리
			
			Configuration XML, Mapper XML 을 통해서 쿼리의 구조적인 관리를
			가능하게 해준다.
			
			XML의 Query를 사용하기 위해서는
			SQLSessionFactory, SQLSessionTemplate이 필요하며
			DAO 클래스에서는
			SQLSessionDaoSupport를 상속받아야민 한다.
		 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.2.8</version>
		</dependency>
		<!-- 
			JDBC API를 쓰기 편리하게 Spring에서 추상화 시켜놓은 모듈
			MyBatis가 이 모듈을 사용한다.
		
		 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>4.1.6.RELEASE</version>
		</dependency>
		<!-- 
			Spring AOP의 핵심 모듈 중 하나
			Weaving이라는 행위를 통해서 여러 클래스를 하나의 클래스 인것 처럼
			변경해준다.
		
			Compile 단계에서 Class 파일에서 직접적인 수정을 한다.
		 -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.8.5</version>
		</dependency>
		
		<!-- 
		
			여러 기능들의 공통된 기능을 수행하게 하고 싶을 때 AOP라는 것을 사용한다.
			AOP는 기능이라보다는 프로그래밍의 방식중 하나로
			Aspect Oriented Programing(관점 지향 프로그래밍)이라 부른다.
			Spring AOP, PointCut Advisor를 통해서
			공통 기능을 수행하고 싶은 위치를 설정한다.
			
			(Spring 교안 70~78 슬라이드 참고)
			
		 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>4.1.6.RELEASE</version>
		</dependency>
		<!--  
			
			MyBatis에서 실행되는 쿼리들의 결과 및 에러들을 로그를 통해
			보기 위한 라이브러리
			
			net.sf.log4jdbc.DriverSpy
			jdbc:log4jdbc:oracle:thin:
			위 두 개 클래스를 Connection Pool 설정에 사용한다.
			
		-->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.7.12</version>
		</dependency>
		<!--
			
			JSP Page의 Template 기능을 부여한다.
			특정한 URL에 특정한 Template을 사용하게 하며
			공통된 기능이 있다면 Template에 코딩해두어
			중복 작성을 막는다.
			
			Template 프레임 워크는 Sitemesh, Tiles2, Velocity 등이 있는데
			가장 많이 쓰이는 프레임워크는 Sitemesh 이다.
			
			http://nkcnow.tistory.com/entry/spring에서-sitemesh설정-레이아웃-템플릿
		  -->
		<dependency>
  		<groupId>opensymphony</groupId>
    	<artifactId>sitemesh</artifactId>
    	<version>2.4.2</version>
  		</dependency>
		<!--  
		
			패스워드 암호화 라이브러리
			Database에 Password나 민감한 개인정보를 저장할 때
			반드시 암호화 시켜서 저장해야 한다.
			
			이때 암호화 하는 방식은 복호화가 불가능해야 한다.
			jbcrypt 라이브러리는 암호화를 할 때 Salt값을 사용해
			암호화 하기 때문에 복호화가 불가능하다.
			
			(HuCloud Login 및 Regist 로직참고)
		
		-->
		<dependency>
			<groupId>org.mindrot</groupId>
			<artifactId>jbcrypt</artifactId>
			<version>0.3m</version>
		</dependency>
	</dependencies>
</project>